# 15 "ocamlbuild/lexers.mll"
 
exception Error of (string * Lexing.position)

let error lexbuf fmt = Printf.ksprintf (fun s -> raise (Error (s,Lexing.lexeme_start_p lexbuf))) fmt

open Glob_ast

type conf_values =
  { plus_tags   : string list;
    minus_tags  : string list }

type conf = (Glob.globber * conf_values) list

let empty = { plus_tags = []; minus_tags = [] }

# 18 "ocamlbuild/lexers.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\253\255\254\255\001\000\255\255\002\000\007\000\008\000\
    \254\255\012\000\017\000\022\000\033\000\254\255\013\000\003\000\
    \038\000\043\000\018\000\004\000\054\000\059\000\252\255\064\000\
    \069\000\075\000\080\000\090\000\096\000\254\255\023\000\255\255\
    \027\000\086\000\252\255\253\255\102\000\104\000\108\000\255\255\
    \029\000\112\000\253\255\254\255\117\000\123\000\130\000\138\000\
    \145\000\151\000\252\255\253\255\156\000\160\000\164\000\255\255\
    \166\000\175\000\253\255\181\000\182\000\190\000\197\000\203\000\
    \208\000\021\000\253\255\024\000\045\000\060\000\253\255\254\255\
    \068\000\039\000\253\255\065\000\079\000\083\000\253\255\254\255\
    \085\000\218\000\250\255\223\000\252\255\026\000\253\255\229\000\
    \039\001\212\000\233\000\235\000\079\001\254\255\047\000\255\255\
    \252\000\241\000\088\001\253\255\103\001\109\001\144\001\110\000\
    \155\001\199\001\118\000\214\001\224\001\255\255\234\001\254\255\
    \015\002\253\255\254\255\052\000\002\001\006\001\014\001\031\001\
    \127\001\216\001\037\001\021\002\121\000\251\255\093\000\134\000\
    \207\002\140\000\254\255\253\255\145\000\053\000\253\255\254\255\
    \170\000\255\255\057\001\254\255\041\000\068\001\074\001\056\000\
    \164\001\179\001\065\000\059\000\082\000\094\000\100\000\145\000\
    \074\002\063\001\142\001\090\001\104\000\101\000\119\000\109\000\
    \132\000\126\000\133\000\150\000\155\000\161\000\228\000\082\002\
    \188\001\194\001\160\001\187\000\178\000\181\000\193\000\200\000\
    \202\000\255\000\087\002\201\001\207\001\249\001\203\000\219\000\
    \215\000\217\000\210\000\232\000\042\001\234\000\054\001\041\001\
    \092\002\019\002\024\002\045\002\000\001\253\000\002\001\004\001\
    \012\001\009\001\011\001\100\001\108\002\028\002\030\002\098\002\
    \051\001\073\001\081\001\063\001\086\001\082\001\090\001\147\001\
    \113\002\001\002\036\002\102\002\121\002\137\002\149\002\154\002\
    \053\002\061\002\138\002\144\002\165\001\255\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\002\000\255\255\255\255\255\255\001\000\
    \255\255\000\000\002\000\255\255\255\255\255\255\002\000\002\000\
    \000\000\002\000\255\255\255\255\255\255\255\255\255\255\002\000\
    \002\000\004\000\004\000\255\255\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\255\255\001\000\003\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\002\000\002\000\255\255\255\255\
    \000\000\255\255\255\255\255\255\001\000\003\000\255\255\255\255\
    \255\255\255\255\255\255\001\000\003\000\003\000\255\255\255\255\
    \000\000\000\000\255\255\001\000\000\000\255\255\255\255\255\255\
    \000\000\000\000\255\255\001\000\000\000\255\255\255\255\255\255\
    \000\000\255\255\255\255\005\000\255\255\002\000\255\255\005\000\
    \005\000\004\000\255\255\255\255\255\255\255\255\000\000\255\255\
    \004\000\255\255\255\255\255\255\001\000\001\000\001\000\255\255\
    \255\255\000\000\255\255\255\255\000\000\255\255\001\000\255\255\
    \255\255\255\255\255\255\001\000\000\000\002\000\002\000\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\003\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \001\000\255\255\255\255\255\255\001\000\001\000\001\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\255\255\255\255";
  Lexing.lex_default = 
   "\003\000\000\000\000\000\005\000\000\000\005\000\009\000\255\255\
    \000\000\009\000\009\000\009\000\016\000\000\000\255\255\255\255\
    \016\000\016\000\255\255\255\255\016\000\023\000\000\000\023\000\
    \024\000\023\000\023\000\023\000\023\000\000\000\255\255\000\000\
    \032\000\036\000\000\000\000\000\036\000\036\000\036\000\000\000\
    \255\255\042\000\000\000\000\000\048\000\255\255\048\000\255\255\
    \048\000\052\000\000\000\000\000\052\000\052\000\052\000\000\000\
    \255\255\059\000\000\000\059\000\064\000\059\000\064\000\059\000\
    \064\000\068\000\000\000\067\000\068\000\070\000\000\000\000\000\
    \072\000\076\000\000\000\075\000\076\000\078\000\000\000\000\000\
    \080\000\083\000\000\000\090\000\000\000\255\255\000\000\091\000\
    \090\000\255\255\090\000\091\000\090\000\000\000\255\255\000\000\
    \097\000\097\000\100\000\000\000\100\000\100\000\105\000\103\000\
    \110\000\105\000\106\000\108\000\108\000\000\000\110\000\000\000\
    \113\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\127\000\000\000\255\255\127\000\
    \255\255\129\000\000\000\000\000\255\255\135\000\000\000\000\000\
    \255\255\000\000\139\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \155\000\255\255\255\255\155\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\170\000\
    \255\255\255\255\170\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\181\000\255\255\255\255\181\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \195\000\255\255\255\255\195\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\207\000\255\255\255\255\207\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \219\000\255\255\255\255\219\000\221\000\221\000\221\000\221\000\
    \255\255\255\255\227\000\227\000\228\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\001\000\255\255\255\255\001\000\255\255\255\255\
    \010\000\008\000\008\000\010\000\007\000\255\255\255\255\019\000\
    \255\255\255\255\011\000\008\000\019\000\011\000\007\000\011\000\
    \008\000\031\000\011\000\007\000\086\000\031\000\040\000\010\000\
    \030\000\040\000\017\000\015\000\255\255\017\000\014\000\255\255\
    \255\255\011\000\255\255\255\255\020\000\019\000\011\000\020\000\
    \018\000\095\000\001\000\004\000\004\000\040\000\114\000\020\000\
    \019\000\017\000\020\000\018\000\025\000\025\000\255\255\025\000\
    \026\000\255\255\255\255\020\000\255\255\255\255\032\000\031\000\
    \067\000\032\000\030\000\255\255\027\000\027\000\020\000\027\000\
    \028\000\027\000\027\000\025\000\027\000\028\000\024\000\037\000\
    \255\255\075\000\037\000\027\000\027\000\032\000\027\000\028\000\
    \255\255\027\000\027\000\027\000\027\000\028\000\024\000\040\000\
    \027\000\038\000\040\000\024\000\038\000\038\000\037\000\072\000\
    \038\000\045\000\027\000\255\255\045\000\024\000\046\000\255\255\
    \027\000\046\000\034\000\024\000\047\000\128\000\040\000\047\000\
    \038\000\255\255\146\000\046\000\038\000\080\000\046\000\255\255\
    \045\000\136\000\255\255\047\000\255\255\046\000\047\000\111\000\
    \255\255\146\000\255\255\047\000\044\000\255\255\126\000\109\000\
    \053\000\255\255\046\000\053\000\147\000\056\000\148\000\046\000\
    \056\000\054\000\047\000\255\255\054\000\054\000\255\255\056\000\
    \054\000\255\255\056\000\149\000\255\255\131\000\046\000\053\000\
    \061\000\129\000\129\000\061\000\056\000\255\255\255\255\062\000\
    \054\000\255\255\062\000\050\000\054\000\150\000\056\000\063\000\
    \255\255\151\000\063\000\152\000\255\255\157\000\062\000\061\000\
    \255\255\062\000\137\000\137\000\063\000\255\255\062\000\063\000\
    \158\000\255\255\159\000\060\000\255\255\089\000\063\000\160\000\
    \089\000\255\255\255\255\088\000\086\000\062\000\088\000\085\000\
    \132\000\255\255\062\000\063\000\255\255\161\000\162\000\095\000\
    \255\255\255\255\094\000\255\255\089\000\095\000\255\255\062\000\
    \094\000\163\000\088\000\095\000\255\255\087\000\094\000\164\000\
    \002\000\255\255\255\255\013\000\013\000\096\000\095\000\255\255\
    \096\000\094\000\165\000\116\000\255\255\013\000\116\000\166\000\
    \120\000\255\255\013\000\121\000\082\000\066\000\255\255\120\000\
    \255\255\089\000\120\000\029\000\096\000\039\000\167\000\096\000\
    \172\000\013\000\116\000\089\000\173\000\096\000\255\255\074\000\
    \174\000\120\000\175\000\013\000\121\000\255\255\120\000\116\000\
    \092\000\086\000\123\000\092\000\085\000\134\000\013\000\176\000\
    \177\000\178\000\116\000\022\000\071\000\183\000\184\000\185\000\
    \255\255\255\255\186\000\142\000\255\255\029\000\141\000\092\000\
    \187\000\154\000\091\000\022\000\153\000\188\000\145\000\255\255\
    \022\000\144\000\189\000\079\000\145\000\255\255\035\000\144\000\
    \092\000\086\000\022\000\092\000\085\000\190\000\122\000\191\000\
    \022\000\089\000\099\000\192\000\154\000\099\000\039\000\153\000\
    \035\000\197\000\119\000\198\000\035\000\199\000\255\255\092\000\
    \043\000\255\255\091\000\200\000\255\255\255\255\255\255\255\255\
    \099\000\125\000\255\255\043\000\201\000\202\000\203\000\099\000\
    \099\000\099\000\255\255\101\000\099\000\102\000\255\255\255\255\
    \120\000\089\000\043\000\120\000\255\255\255\255\255\255\103\000\
    \255\255\255\255\099\000\255\255\255\255\103\000\255\255\051\000\
    \154\000\255\255\255\255\153\000\055\000\255\255\204\000\120\000\
    \051\000\104\000\209\000\156\000\051\000\255\255\055\000\104\000\
    \255\255\140\000\169\000\116\000\210\000\168\000\145\000\058\000\
    \255\255\144\000\211\000\212\000\143\000\255\255\255\255\255\255\
    \103\000\255\255\143\000\255\255\255\255\145\000\058\000\213\000\
    \144\000\214\000\255\255\255\255\255\255\255\255\169\000\255\255\
    \215\000\168\000\104\000\058\000\169\000\216\000\229\000\168\000\
    \255\255\255\255\000\000\180\000\255\255\255\255\179\000\000\000\
    \000\000\180\000\084\000\119\000\179\000\000\000\000\000\255\255\
    \255\255\120\000\120\000\255\255\120\000\093\000\000\000\255\255\
    \000\000\255\255\255\255\093\000\000\000\255\255\255\255\106\000\
    \255\255\093\000\156\000\255\255\255\255\000\000\255\255\255\255\
    \120\000\000\000\000\000\000\000\093\000\255\255\255\255\255\255\
    \255\255\107\000\255\255\180\000\116\000\000\000\179\000\255\255\
    \255\255\255\255\255\255\218\000\255\255\000\000\217\000\000\000\
    \255\255\255\255\255\255\255\255\143\000\000\000\255\255\000\000\
    \118\000\114\000\255\255\118\000\115\000\194\000\116\000\116\000\
    \193\000\116\000\194\000\143\000\255\255\193\000\206\000\084\000\
    \206\000\205\000\182\000\205\000\000\000\000\000\218\000\118\000\
    \182\000\217\000\171\000\000\000\119\000\116\000\000\000\194\000\
    \171\000\255\255\193\000\116\000\000\000\000\000\224\000\224\000\
    \000\000\224\000\225\000\000\000\000\000\000\000\224\000\224\000\
    \000\000\224\000\225\000\000\000\000\000\000\000\000\000\084\000\
    \000\000\000\000\000\000\152\000\154\000\224\000\152\000\153\000\
    \099\000\000\000\255\255\167\000\169\000\224\000\167\000\168\000\
    \178\000\180\000\000\000\178\000\179\000\192\000\194\000\255\255\
    \192\000\193\000\152\000\117\000\206\000\255\255\000\000\205\000\
    \218\000\122\000\167\000\217\000\000\000\204\000\206\000\178\000\
    \204\000\205\000\216\000\218\000\192\000\216\000\217\000\196\000\
    \000\000\000\000\222\000\222\000\196\000\222\000\223\000\000\000\
    \208\000\000\000\208\000\000\000\204\000\000\000\000\000\000\000\
    \255\255\216\000\224\000\224\000\255\255\224\000\225\000\255\255\
    \000\000\222\000\255\255\255\255\000\000\255\255\222\000\222\000\
    \255\255\222\000\223\000\222\000\222\000\255\255\222\000\223\000\
    \000\000\224\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \255\255\255\255\255\255\255\255\000\000\222\000\255\255\255\255\
    \228\000\255\255\222\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\000\000\255\255\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \130\000\255\255\000\000\000\000\128\000\000\000\000\000\128\000\
    \128\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
    \128\000\129\000\000\000\000\000\000\000\000\000\000\000\114\000\
    \128\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
    \128\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
    \128\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
    \128\000\128\000\000\000\000\000\000\000\255\255\128\000\000\000\
    \128\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
    \128\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
    \128\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
    \128\000\128\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\000\000\000\000\000\000\000\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\003\000\005\000\000\000\003\000\005\000\
    \006\000\006\000\007\000\006\000\006\000\009\000\009\000\014\000\
    \009\000\009\000\010\000\010\000\018\000\010\000\010\000\011\000\
    \011\000\030\000\011\000\011\000\085\000\032\000\040\000\006\000\
    \032\000\040\000\012\000\012\000\009\000\012\000\012\000\016\000\
    \016\000\010\000\016\000\016\000\017\000\017\000\011\000\017\000\
    \017\000\094\000\000\000\003\000\005\000\040\000\115\000\020\000\
    \020\000\012\000\020\000\020\000\021\000\021\000\016\000\021\000\
    \021\000\023\000\023\000\017\000\023\000\023\000\024\000\024\000\
    \065\000\024\000\024\000\067\000\025\000\025\000\020\000\025\000\
    \025\000\026\000\026\000\021\000\026\000\026\000\021\000\033\000\
    \023\000\073\000\033\000\027\000\027\000\024\000\027\000\027\000\
    \068\000\028\000\028\000\025\000\028\000\028\000\025\000\036\000\
    \026\000\037\000\036\000\026\000\037\000\038\000\033\000\069\000\
    \038\000\041\000\027\000\075\000\041\000\027\000\044\000\072\000\
    \028\000\044\000\033\000\028\000\045\000\126\000\036\000\045\000\
    \037\000\076\000\140\000\046\000\038\000\077\000\046\000\080\000\
    \041\000\133\000\036\000\047\000\037\000\044\000\047\000\103\000\
    \038\000\143\000\048\000\045\000\041\000\048\000\124\000\106\000\
    \049\000\044\000\046\000\049\000\146\000\052\000\147\000\045\000\
    \052\000\053\000\047\000\127\000\053\000\054\000\046\000\056\000\
    \054\000\048\000\056\000\148\000\129\000\129\000\047\000\049\000\
    \057\000\132\000\132\000\057\000\052\000\048\000\059\000\060\000\
    \053\000\059\000\060\000\049\000\054\000\149\000\056\000\061\000\
    \052\000\150\000\061\000\151\000\053\000\156\000\062\000\057\000\
    \054\000\062\000\136\000\136\000\063\000\059\000\060\000\063\000\
    \157\000\064\000\158\000\057\000\064\000\089\000\061\000\159\000\
    \089\000\059\000\060\000\081\000\081\000\062\000\081\000\081\000\
    \129\000\083\000\061\000\063\000\083\000\160\000\161\000\087\000\
    \064\000\062\000\087\000\090\000\089\000\091\000\090\000\063\000\
    \091\000\162\000\081\000\097\000\064\000\081\000\097\000\163\000\
    \000\000\003\000\005\000\015\000\019\000\096\000\096\000\006\000\
    \096\000\096\000\164\000\116\000\009\000\014\000\116\000\165\000\
    \117\000\010\000\018\000\117\000\081\000\065\000\011\000\118\000\
    \067\000\083\000\118\000\032\000\096\000\040\000\166\000\087\000\
    \171\000\012\000\116\000\090\000\172\000\091\000\016\000\073\000\
    \173\000\119\000\174\000\017\000\119\000\068\000\118\000\122\000\
    \088\000\088\000\122\000\088\000\088\000\133\000\020\000\175\000\
    \176\000\177\000\118\000\021\000\069\000\182\000\183\000\184\000\
    \023\000\075\000\185\000\138\000\072\000\024\000\138\000\088\000\
    \186\000\153\000\088\000\025\000\153\000\187\000\141\000\076\000\
    \026\000\141\000\188\000\077\000\142\000\080\000\033\000\142\000\
    \092\000\092\000\027\000\092\000\092\000\189\000\116\000\190\000\
    \028\000\088\000\098\000\191\000\155\000\098\000\036\000\155\000\
    \037\000\196\000\118\000\197\000\038\000\198\000\103\000\092\000\
    \041\000\100\000\092\000\199\000\100\000\044\000\106\000\101\000\
    \098\000\124\000\101\000\045\000\200\000\201\000\202\000\098\000\
    \098\000\098\000\046\000\098\000\098\000\098\000\127\000\100\000\
    \120\000\092\000\047\000\120\000\129\000\101\000\100\000\100\000\
    \100\000\048\000\098\000\100\000\101\000\101\000\101\000\049\000\
    \154\000\101\000\102\000\154\000\052\000\102\000\203\000\120\000\
    \053\000\100\000\208\000\153\000\054\000\104\000\056\000\101\000\
    \104\000\138\000\170\000\120\000\209\000\170\000\144\000\057\000\
    \102\000\144\000\210\000\211\000\141\000\059\000\060\000\102\000\
    \102\000\102\000\142\000\104\000\102\000\145\000\061\000\212\000\
    \145\000\213\000\104\000\104\000\104\000\062\000\168\000\104\000\
    \214\000\168\000\102\000\063\000\169\000\215\000\228\000\169\000\
    \064\000\105\000\255\255\179\000\105\000\104\000\179\000\255\255\
    \255\255\180\000\081\000\120\000\180\000\255\255\255\255\083\000\
    \107\000\121\000\121\000\107\000\121\000\087\000\255\255\105\000\
    \255\255\090\000\108\000\091\000\255\255\108\000\105\000\105\000\
    \105\000\097\000\154\000\105\000\110\000\255\255\107\000\110\000\
    \121\000\255\255\255\255\255\255\096\000\107\000\107\000\107\000\
    \108\000\105\000\107\000\181\000\121\000\255\255\181\000\108\000\
    \108\000\108\000\110\000\217\000\108\000\255\255\217\000\255\255\
    \107\000\110\000\110\000\110\000\144\000\255\255\110\000\255\255\
    \112\000\112\000\108\000\112\000\112\000\193\000\123\000\123\000\
    \193\000\123\000\194\000\145\000\110\000\194\000\205\000\088\000\
    \206\000\205\000\179\000\206\000\255\255\255\255\218\000\112\000\
    \180\000\218\000\168\000\255\255\121\000\123\000\255\255\195\000\
    \169\000\138\000\195\000\112\000\255\255\255\255\224\000\224\000\
    \255\255\224\000\224\000\255\255\255\255\255\255\225\000\225\000\
    \255\255\225\000\225\000\255\255\255\255\255\255\255\255\092\000\
    \255\255\255\255\255\255\152\000\152\000\224\000\152\000\152\000\
    \098\000\255\255\155\000\167\000\167\000\225\000\167\000\167\000\
    \178\000\178\000\255\255\178\000\178\000\192\000\192\000\100\000\
    \192\000\192\000\152\000\112\000\207\000\101\000\255\255\207\000\
    \219\000\123\000\167\000\219\000\255\255\204\000\204\000\178\000\
    \204\000\204\000\216\000\216\000\192\000\216\000\216\000\193\000\
    \255\255\255\255\220\000\220\000\194\000\220\000\220\000\255\255\
    \205\000\255\255\206\000\255\255\204\000\255\255\255\255\255\255\
    \102\000\216\000\221\000\221\000\226\000\221\000\221\000\226\000\
    \255\255\220\000\227\000\104\000\255\255\227\000\222\000\222\000\
    \170\000\222\000\222\000\223\000\223\000\228\000\223\000\223\000\
    \255\255\221\000\226\000\255\255\255\255\255\255\255\255\255\255\
    \227\000\226\000\226\000\226\000\255\255\222\000\226\000\227\000\
    \227\000\227\000\223\000\255\255\227\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\226\000\255\255\255\255\105\000\
    \255\255\255\255\227\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\107\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \108\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\110\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \128\000\181\000\255\255\255\255\128\000\255\255\255\255\128\000\
    \128\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
    \128\000\128\000\255\255\255\255\255\255\255\255\255\255\112\000\
    \128\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
    \128\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
    \128\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
    \128\000\128\000\255\255\255\255\255\255\195\000\128\000\255\255\
    \128\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
    \128\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
    \128\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
    \128\000\128\000\152\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\167\000\255\255\255\255\255\255\255\255\178\000\
    \255\255\255\255\255\255\255\255\192\000\255\255\255\255\255\255\
    \255\255\255\255\207\000\255\255\255\255\255\255\219\000\255\255\
    \255\255\255\255\255\255\255\255\204\000\255\255\255\255\255\255\
    \255\255\216\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\220\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\221\000\226\000\255\255\255\255\255\255\255\255\255\255\
    \227\000\255\255\255\255\255\255\255\255\222\000\255\255\255\255\
    \255\255\255\255\223\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_base_code = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\001\000\002\000\006\000\000\000\000\000\000\000\
    \000\000\007\000\000\000\000\000\008\000\012\000\000\000\000\000\
    \000\000\017\000\033\000\038\000\043\000\000\000\000\000\000\000\
    \000\000\045\000\000\000\000\000\049\000\050\000\051\000\018\000\
    \000\000\020\000\000\000\000\000\059\000\022\000\060\000\023\000\
    \000\000\064\000\000\000\000\000\075\000\088\000\089\000\018\000\
    \000\000\090\000\000\000\000\000\094\000\103\000\104\000\105\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\118\000\000\000\128\000\000\000\000\000\000\000\129\000\
    \142\000\000\000\130\000\135\000\147\000\000\000\000\000\000\000\
    \000\000\000\000\031\000\000\000\000\000\151\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\
    \162\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\000\
    \153\000\000\000\000\000\157\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\021\000\189\000\
    \000\000\000\000\158\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\022\000\020\001\000\000\000\000\159\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\027\000\
    \025\001\000\000\000\000\165\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\028\000\030\001\000\000\000\000\167\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\030\000\
    \046\001\000\000\000\000\171\000\058\001\064\001\070\001\082\001\
    \000\000\000\000\136\001\142\001\063\000\208\000";
  Lexing.lex_backtrk_code = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \004\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\
    \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\015\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \004\000\000\000\000\000\000\000\015\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\
    \026\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\045\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \060\000\000\000\000\000\000\000\004\000\004\000\004\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\146\000\146\000\000\000\171\000\171\000\171\000\181\000\
    \171\000\171\000\000\000\200\000\000\000\000\000";
  Lexing.lex_default_code = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\007\000\000\000\000\000\007\000\007\000\007\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\007\000\000\000\000\000\007\000\007\000\007\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\029\000\000\000\037\000\000\000\000\000\000\000\037\000\
    \029\000\000\000\029\000\029\000\037\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\065\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \073\000\000\000\000\000\073\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\086\000\
    \000\000\000\000\086\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\099\000\000\000\000\000\099\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \112\000\000\000\000\000\112\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\125\000\000\000\000\000\125\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \138\000\000\000\000\000\138\000\023\000\023\000\023\000\186\000\
    \000\000\000\000\029\000\029\000\205\000\000\000";
  Lexing.lex_trans_code = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\000\000\
    \001\000\001\000\001\000\001\000\000\000\001\000\001\000\000\000\
    \001\000\001\000\001\000\000\000\000\000\000\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\010\000\001\000\
    \001\000\010\000\000\000\010\000\010\000\000\000\010\000\010\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\010\000\023\000\001\000\010\000\010\000\068\000\081\000\
    \094\000\000\000\010\000\010\000\000\000\107\000\120\000\000\000\
    \133\000\000\000\000\000\001\000\001\000\000\000\000\000\000\000\
    \010\000\010\000\010\000\001\000\010\000\010\000\001\000\023\000\
    \000\000\000\000\023\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\023\000\001\000\001\000\023\000\001\000\000\000\000\000\
    \010\000\010\000\001\000\000\000\000\000\000\000\023\000\032\000\
    \000\000\000\000\032\000\000\000\000\000\000\000\023\000\001\000\
    \023\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\023\000\000\000\023\000\032\000\010\000\
    \000\000\000\000\010\000\000\000\053\000\000\000\000\000\053\000\
    \000\000\000\000\076\000\000\000\000\000\076\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\010\000\000\000\
    \000\000\000\000\000\000\053\000\000\000\000\000\000\000\000\000\
    \000\000\076\000\000\000\042\000\050\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\089\000\000\000\
    \000\000\089\000\000\000\000\000\000\000\050\000\000\000\001\000\
    \000\000\000\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\000\000\089\000\000\000\000\000\
    \000\000\000\000\000\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\000\000\000\000\000\000\
    \000\000\001\000\000\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\102\000\000\000\000\000\
    \102\000\000\000\115\000\000\000\000\000\115\000\000\000\128\000\
    \000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\102\000\000\000\000\000\141\000\
    \000\000\115\000\141\000\000\000\000\000\000\000\128\000\000\000\
    \000\000\000\000\000\000\010\000\010\000\000\000\010\000\176\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\141\000\010\000\
    \010\000\000\000\010\000\176\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\010\000\010\000\010\000\000\000\010\000\191\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\010\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\176\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check_code = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\006\000\010\000\011\000\006\000\010\000\011\000\012\000\
    \017\000\020\000\012\000\017\000\020\000\021\000\021\000\255\255\
    \021\000\021\000\025\000\025\000\255\255\025\000\025\000\255\255\
    \006\000\010\000\011\000\255\255\255\255\255\255\012\000\017\000\
    \020\000\126\000\026\000\026\000\021\000\026\000\026\000\027\000\
    \027\000\025\000\027\000\027\000\028\000\028\000\033\000\028\000\
    \028\000\033\000\036\000\037\000\038\000\036\000\037\000\038\000\
    \041\000\026\000\045\000\047\000\044\000\046\000\027\000\044\000\
    \046\000\049\000\098\000\028\000\049\000\033\000\151\000\166\000\
    \177\000\036\000\037\000\038\000\052\000\191\000\203\000\052\000\
    \215\000\033\000\255\255\044\000\046\000\036\000\037\000\038\000\
    \049\000\053\000\054\000\057\000\053\000\054\000\057\000\060\000\
    \228\000\255\255\060\000\052\000\049\000\255\255\255\255\255\255\
    \061\000\062\000\063\000\061\000\062\000\063\000\255\255\052\000\
    \053\000\054\000\057\000\255\255\255\255\255\255\060\000\081\000\
    \081\000\255\255\081\000\081\000\053\000\054\000\057\000\061\000\
    \062\000\063\000\083\000\087\000\090\000\083\000\087\000\090\000\
    \255\255\091\000\255\255\061\000\091\000\063\000\081\000\088\000\
    \088\000\255\255\088\000\088\000\092\000\092\000\255\255\092\000\
    \092\000\101\000\152\000\152\000\101\000\152\000\152\000\155\000\
    \170\000\181\000\155\000\170\000\181\000\255\255\088\000\195\000\
    \081\000\207\000\195\000\092\000\207\000\219\000\255\255\101\000\
    \219\000\152\000\083\000\087\000\090\000\255\255\101\000\101\000\
    \101\000\091\000\255\255\101\000\255\255\255\255\167\000\167\000\
    \088\000\167\000\167\000\255\255\255\255\092\000\255\255\128\000\
    \255\255\101\000\128\000\128\000\128\000\128\000\128\000\128\000\
    \128\000\128\000\128\000\128\000\255\255\167\000\255\255\255\255\
    \255\255\255\255\255\255\128\000\128\000\128\000\128\000\128\000\
    \128\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
    \128\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
    \128\000\128\000\128\000\128\000\128\000\255\255\255\255\255\255\
    \255\255\128\000\255\255\128\000\128\000\128\000\128\000\128\000\
    \128\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
    \128\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
    \128\000\128\000\128\000\128\000\128\000\178\000\178\000\255\255\
    \178\000\178\000\192\000\192\000\255\255\192\000\192\000\204\000\
    \204\000\255\255\204\000\204\000\255\255\033\000\255\255\255\255\
    \255\255\036\000\037\000\038\000\178\000\255\255\255\255\216\000\
    \216\000\192\000\216\000\216\000\255\255\255\255\204\000\228\000\
    \049\000\255\255\255\255\220\000\220\000\255\255\220\000\220\000\
    \255\255\221\000\221\000\052\000\221\000\221\000\216\000\222\000\
    \222\000\255\255\222\000\222\000\255\255\255\255\255\255\255\255\
    \053\000\054\000\220\000\223\000\223\000\255\255\223\000\223\000\
    \221\000\255\255\255\255\255\255\255\255\255\255\222\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\223\000\255\255\255\255\255\255\081\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \083\000\087\000\090\000\255\255\255\255\255\255\255\255\091\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\088\000\255\255\
    \255\255\255\255\226\000\092\000\255\255\226\000\255\255\101\000\
    \227\000\152\000\255\255\227\000\255\255\155\000\170\000\181\000\
    \255\255\255\255\255\255\255\255\255\255\195\000\255\255\207\000\
    \226\000\255\255\255\255\219\000\255\255\255\255\227\000\226\000\
    \226\000\226\000\255\255\255\255\226\000\227\000\227\000\227\000\
    \255\255\255\255\227\000\255\255\255\255\167\000\255\255\255\255\
    \255\255\255\255\226\000\255\255\255\255\255\255\255\255\255\255\
    \227\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\178\000\255\255\255\255\255\255\
    \255\255\192\000\255\255\255\255\255\255\255\255\204\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\216\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\220\000\255\255\255\255\255\255\255\255\255\255\
    \221\000\255\255\255\255\255\255\255\255\255\255\222\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\223\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \226\000\255\255\255\255\255\255\255\255\255\255\227\000";
  Lexing.lex_code = 
   "\255\001\255\255\000\001\255\004\255\255\003\255\002\255\255\000\
    \003\255\000\002\001\004\255\002\255\255\000\002\255\003\255\255\
    \004\255\003\255\255\004\002\003\255\255\004\002\255\000\002\001\
    \003\255\002\004\255\004\002\002\255\003\255\255\000\004\001\003\
    \255\001\002\255\013\255\012\255\255\013\255\255\012\255\013\255\
    \255\015\255\014\255\255\015\255\255\014\255\015\255\255\017\255\
    \016\255\255\017\255\255\016\255\017\255\255\019\255\018\255\255\
    \019\255\255\018\255\019\255\255\021\255\020\255\255\021\255\255\
    \020\255\021\255\255\023\255\022\255\255\023\255\255\022\255\023\
    \255\255\004\016\005\017\000\012\001\013\008\020\009\021\010\022\
    \011\023\002\014\003\015\006\018\007\019\255\000\003\001\002\255\
    \005\255\004\255\255\000\005\001\004\255\003\005\002\255\255\003\
    \005\002\004\005\255\004\255\255\002\255\000\003\255\005\255\255\
    \002\004\001\005\000\003\255";
}

let rec ocamldep_output lexbuf =
    __ocaml_lex_ocamldep_output_rec lexbuf 0
and __ocaml_lex_ocamldep_output_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 46 "ocamlbuild/lexers.mll"
                            k
# 639 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_curr_pos + -1) in
# 46 "ocamlbuild/lexers.mll"
                                   ( let x = (k, space_sep_strings_nl lexbuf) in x :: ocamldep_output lexbuf )
# 643 "ocamlbuild/lexers.ml"

  | 1 ->
# 47 "ocamlbuild/lexers.mll"
        ( [] )
# 648 "ocamlbuild/lexers.ml"

  | 2 ->
# 48 "ocamlbuild/lexers.mll"
      ( error lexbuf "Expecting colon followed by space-separated module name list" )
# 653 "ocamlbuild/lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_ocamldep_output_rec lexbuf __ocaml_lex_state

and space_sep_strings_nl lexbuf =
  lexbuf.Lexing.lex_mem <- Array.create 2 (-1) ; (* L=1 [1] <- p ;  *)
  lexbuf.Lexing.lex_mem.(1) <- lexbuf.Lexing.lex_curr_pos ;
  __ocaml_lex_space_sep_strings_nl_rec lexbuf 6
and __ocaml_lex_space_sep_strings_nl_rec lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 51 "ocamlbuild/lexers.mll"
                          word
# 667 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_curr_pos in
# 51 "ocamlbuild/lexers.mll"
                                ( word :: space_sep_strings_nl lexbuf )
# 671 "ocamlbuild/lexers.ml"

  | 1 ->
# 52 "ocamlbuild/lexers.mll"
                   ( Lexing.new_line lexbuf; [] )
# 676 "ocamlbuild/lexers.ml"

  | 2 ->
# 53 "ocamlbuild/lexers.mll"
      ( error lexbuf "Expecting space-separated strings terminated with newline" )
# 681 "ocamlbuild/lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_space_sep_strings_nl_rec lexbuf __ocaml_lex_state

and space_sep_strings lexbuf =
  lexbuf.Lexing.lex_mem <- Array.create 2 (-1) ; (* L=1 [1] <- p ;  *)
  lexbuf.Lexing.lex_mem.(1) <- lexbuf.Lexing.lex_curr_pos ;
  __ocaml_lex_space_sep_strings_rec lexbuf 12
and __ocaml_lex_space_sep_strings_rec lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 56 "ocamlbuild/lexers.mll"
                          word
# 695 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_curr_pos in
# 56 "ocamlbuild/lexers.mll"
                                ( word :: space_sep_strings lexbuf )
# 699 "ocamlbuild/lexers.ml"

  | 1 ->
# 57 "ocamlbuild/lexers.mll"
                        ( [] )
# 704 "ocamlbuild/lexers.ml"

  | 2 ->
# 58 "ocamlbuild/lexers.mll"
      ( error lexbuf "Expecting space-separated strings" )
# 709 "ocamlbuild/lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_space_sep_strings_rec lexbuf __ocaml_lex_state

and blank_sep_strings lexbuf =
  lexbuf.Lexing.lex_mem <- Array.create 2 (-1) ; (* L=1 [1] <- p ;  *)
  lexbuf.Lexing.lex_mem.(1) <- lexbuf.Lexing.lex_curr_pos ;
  __ocaml_lex_blank_sep_strings_rec lexbuf 21
and __ocaml_lex_blank_sep_strings_rec lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 61 "ocamlbuild/lexers.mll"
                                    ( blank_sep_strings lexbuf )
# 722 "ocamlbuild/lexers.ml"

  | 1 ->
# 62 "ocamlbuild/lexers.mll"
                                ( [] )
# 727 "ocamlbuild/lexers.ml"

  | 2 ->
let
# 63 "ocamlbuild/lexers.mll"
                          word
# 733 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_curr_pos in
# 63 "ocamlbuild/lexers.mll"
                                ( word :: blank_sep_strings lexbuf )
# 737 "ocamlbuild/lexers.ml"

  | 3 ->
# 64 "ocamlbuild/lexers.mll"
               ( [] )
# 742 "ocamlbuild/lexers.ml"

  | 4 ->
# 65 "ocamlbuild/lexers.mll"
      ( error lexbuf "Expecting blank-separated strings" )
# 747 "ocamlbuild/lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_blank_sep_strings_rec lexbuf __ocaml_lex_state

and comma_sep_strings lexbuf =
  lexbuf.Lexing.lex_mem <- Array.create 5 (-1) ; (* L=2 [3] <- p ; [2] <- p ;  *)
  lexbuf.Lexing.lex_mem.(3) <- lexbuf.Lexing.lex_curr_pos ;
  lexbuf.Lexing.lex_mem.(2) <- lexbuf.Lexing.lex_curr_pos ;
  __ocaml_lex_comma_sep_strings_rec lexbuf 33
and __ocaml_lex_comma_sep_strings_rec lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 68 "ocamlbuild/lexers.mll"
                                    word
# 762 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_mem.(1) in
# 68 "ocamlbuild/lexers.mll"
                                                     ( [word] )
# 766 "ocamlbuild/lexers.ml"

  | 1 ->
let
# 69 "ocamlbuild/lexers.mll"
                                    word
# 772 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_curr_pos in
# 69 "ocamlbuild/lexers.mll"
                                          ( word :: comma_sep_strings_aux lexbuf )
# 776 "ocamlbuild/lexers.ml"

  | 2 ->
# 70 "ocamlbuild/lexers.mll"
               ( [] )
# 781 "ocamlbuild/lexers.ml"

  | 3 ->
# 71 "ocamlbuild/lexers.mll"
      ( error lexbuf "Expecting comma-separated strings (1)" )
# 786 "ocamlbuild/lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_comma_sep_strings_rec lexbuf __ocaml_lex_state

and comma_sep_strings_aux lexbuf =
  lexbuf.Lexing.lex_mem <- Array.create 2 (-1) ;   __ocaml_lex_comma_sep_strings_aux_rec lexbuf 41
and __ocaml_lex_comma_sep_strings_aux_rec lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 73 "ocamlbuild/lexers.mll"
                                               word
# 798 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_curr_pos in
# 73 "ocamlbuild/lexers.mll"
                                                     ( word :: comma_sep_strings_aux lexbuf )
# 802 "ocamlbuild/lexers.ml"

  | 1 ->
# 74 "ocamlbuild/lexers.mll"
               ( [] )
# 807 "ocamlbuild/lexers.ml"

  | 2 ->
# 75 "ocamlbuild/lexers.mll"
      ( error lexbuf "Expecting comma-separated strings (2)" )
# 812 "ocamlbuild/lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_comma_sep_strings_aux_rec lexbuf __ocaml_lex_state

and comma_or_blank_sep_strings lexbuf =
  lexbuf.Lexing.lex_mem <- Array.create 5 (-1) ; (* L=2 [3] <- p ; [2] <- p ;  *)
  lexbuf.Lexing.lex_mem.(3) <- lexbuf.Lexing.lex_curr_pos ;
  lexbuf.Lexing.lex_mem.(2) <- lexbuf.Lexing.lex_curr_pos ;
  __ocaml_lex_comma_or_blank_sep_strings_rec lexbuf 49
and __ocaml_lex_comma_or_blank_sep_strings_rec lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 78 "ocamlbuild/lexers.mll"
                                    word
# 827 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_mem.(1) in
# 78 "ocamlbuild/lexers.mll"
                                                     ( [word] )
# 831 "ocamlbuild/lexers.ml"

  | 1 ->
let
# 79 "ocamlbuild/lexers.mll"
                                    word
# 837 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_curr_pos in
# 79 "ocamlbuild/lexers.mll"
                                          ( word :: comma_or_blank_sep_strings_aux lexbuf )
# 841 "ocamlbuild/lexers.ml"

  | 2 ->
# 80 "ocamlbuild/lexers.mll"
               ( [] )
# 846 "ocamlbuild/lexers.ml"

  | 3 ->
# 81 "ocamlbuild/lexers.mll"
      ( error lexbuf "Expecting (comma|blank)-separated strings (1)" )
# 851 "ocamlbuild/lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_comma_or_blank_sep_strings_rec lexbuf __ocaml_lex_state

and comma_or_blank_sep_strings_aux lexbuf =
  lexbuf.Lexing.lex_mem <- Array.create 3 (-1) ; (* L=1 [1] <- p ;  *)
  lexbuf.Lexing.lex_mem.(1) <- lexbuf.Lexing.lex_curr_pos ;
  __ocaml_lex_comma_or_blank_sep_strings_aux_rec lexbuf 57
and __ocaml_lex_comma_or_blank_sep_strings_aux_rec lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 83 "ocamlbuild/lexers.mll"
                                               word
# 865 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_curr_pos in
# 83 "ocamlbuild/lexers.mll"
                                                     ( word :: comma_or_blank_sep_strings_aux lexbuf )
# 869 "ocamlbuild/lexers.ml"

  | 1 ->
let
# 84 "ocamlbuild/lexers.mll"
                                    word
# 875 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_curr_pos in
# 84 "ocamlbuild/lexers.mll"
                                          ( word :: comma_or_blank_sep_strings_aux lexbuf )
# 879 "ocamlbuild/lexers.ml"

  | 2 ->
# 85 "ocamlbuild/lexers.mll"
               ( [] )
# 884 "ocamlbuild/lexers.ml"

  | 3 ->
# 86 "ocamlbuild/lexers.mll"
      ( error lexbuf "Expecting (comma|blank)-separated strings (2)" )
# 889 "ocamlbuild/lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_comma_or_blank_sep_strings_aux_rec lexbuf __ocaml_lex_state

and parse_environment_path_w lexbuf =
    __ocaml_lex_parse_environment_path_w_rec lexbuf 65
and __ocaml_lex_parse_environment_path_w_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 89 "ocamlbuild/lexers.mll"
                 word
# 901 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 89 "ocamlbuild/lexers.mll"
                       ( word :: parse_environment_path_aux_w lexbuf )
# 905 "ocamlbuild/lexers.ml"

  | 1 ->
let
# 90 "ocamlbuild/lexers.mll"
                     word
# 911 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) lexbuf.Lexing.lex_curr_pos in
# 90 "ocamlbuild/lexers.mll"
                           ( "" :: word :: parse_environment_path_aux_w lexbuf )
# 915 "ocamlbuild/lexers.ml"

  | 2 ->
# 91 "ocamlbuild/lexers.mll"
        ( [] )
# 920 "ocamlbuild/lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_parse_environment_path_w_rec lexbuf __ocaml_lex_state

and parse_environment_path_aux_w lexbuf =
    __ocaml_lex_parse_environment_path_aux_w_rec lexbuf 69
and __ocaml_lex_parse_environment_path_aux_w_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 93 "ocamlbuild/lexers.mll"
                     word
# 932 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) lexbuf.Lexing.lex_curr_pos in
# 93 "ocamlbuild/lexers.mll"
                           ( word :: parse_environment_path_aux_w lexbuf )
# 936 "ocamlbuild/lexers.ml"

  | 1 ->
# 94 "ocamlbuild/lexers.mll"
        ( [] )
# 941 "ocamlbuild/lexers.ml"

  | 2 ->
# 95 "ocamlbuild/lexers.mll"
      ( error lexbuf "Impossible: expecting colon-separated strings" )
# 946 "ocamlbuild/lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_parse_environment_path_aux_w_rec lexbuf __ocaml_lex_state

and parse_environment_path lexbuf =
    __ocaml_lex_parse_environment_path_rec lexbuf 73
and __ocaml_lex_parse_environment_path_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 98 "ocamlbuild/lexers.mll"
                 word
# 958 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 98 "ocamlbuild/lexers.mll"
                       ( word :: parse_environment_path_aux lexbuf )
# 962 "ocamlbuild/lexers.ml"

  | 1 ->
let
# 99 "ocamlbuild/lexers.mll"
                     word
# 968 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) lexbuf.Lexing.lex_curr_pos in
# 99 "ocamlbuild/lexers.mll"
                           ( "" :: word :: parse_environment_path_aux lexbuf )
# 972 "ocamlbuild/lexers.ml"

  | 2 ->
# 100 "ocamlbuild/lexers.mll"
        ( [] )
# 977 "ocamlbuild/lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_parse_environment_path_rec lexbuf __ocaml_lex_state

and parse_environment_path_aux lexbuf =
    __ocaml_lex_parse_environment_path_aux_rec lexbuf 77
and __ocaml_lex_parse_environment_path_aux_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 102 "ocamlbuild/lexers.mll"
                     word
# 989 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) lexbuf.Lexing.lex_curr_pos in
# 102 "ocamlbuild/lexers.mll"
                           ( word :: parse_environment_path_aux lexbuf )
# 993 "ocamlbuild/lexers.ml"

  | 1 ->
# 103 "ocamlbuild/lexers.mll"
        ( [] )
# 998 "ocamlbuild/lexers.ml"

  | 2 ->
# 104 "ocamlbuild/lexers.mll"
      ( error lexbuf "Impossible: expecting colon-separated strings" )
# 1003 "ocamlbuild/lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_parse_environment_path_aux_rec lexbuf __ocaml_lex_state

and conf_lines dir lexbuf =
  lexbuf.Lexing.lex_mem <- Array.create 5 (-1) ; (* L=1 [2] <- p ;  *)
  lexbuf.Lexing.lex_mem.(2) <- lexbuf.Lexing.lex_curr_pos ;
  __ocaml_lex_conf_lines_rec dir lexbuf 81
and __ocaml_lex_conf_lines_rec dir lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 107 "ocamlbuild/lexers.mll"
                                    ( Lexing.new_line lexbuf; conf_lines dir lexbuf )
# 1016 "ocamlbuild/lexers.ml"

  | 1 ->
# 108 "ocamlbuild/lexers.mll"
                                ( [] )
# 1021 "ocamlbuild/lexers.ml"

  | 2 ->
# 109 "ocamlbuild/lexers.mll"
                   ( Lexing.new_line lexbuf; conf_lines dir lexbuf )
# 1026 "ocamlbuild/lexers.ml"

  | 3 ->
# 110 "ocamlbuild/lexers.mll"
               ( [] )
# 1031 "ocamlbuild/lexers.ml"

  | 4 ->
let
# 111 "ocamlbuild/lexers.mll"
                                      k
# 1037 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_mem.(1) in
# 112 "ocamlbuild/lexers.mll"
      (
        let bexpr =
          try Glob.parse ?dir k
          with exn -> error lexbuf "Invalid globbing pattern %S" k (Printexc.to_string exn)
        in
        let v1 = conf_value empty lexbuf in
        let v2 = conf_values v1 lexbuf in
        Lexing.new_line lexbuf; (* FIXME values may have escaped newlines *)
        let rest = conf_lines dir lexbuf in (bexpr,v2) :: rest
      )
# 1050 "ocamlbuild/lexers.ml"

  | 5 ->
# 122 "ocamlbuild/lexers.mll"
      ( error lexbuf "Invalid line syntax" )
# 1055 "ocamlbuild/lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_conf_lines_rec dir lexbuf __ocaml_lex_state

and conf_value x lexbuf =
  lexbuf.Lexing.lex_mem <- Array.create 3 (-1) ; (* L=1 [1] <- p ;  *)
  lexbuf.Lexing.lex_mem.(1) <- lexbuf.Lexing.lex_curr_pos ;
  __ocaml_lex_conf_value_rec x lexbuf 98
and __ocaml_lex_conf_value_rec x lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 125 "ocamlbuild/lexers.mll"
                 tag
# 1069 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) lexbuf.Lexing.lex_curr_pos in
# 125 "ocamlbuild/lexers.mll"
                      ( { (x) with minus_tags = tag :: x.minus_tags } )
# 1073 "ocamlbuild/lexers.ml"

  | 1 ->
let
# 126 "ocamlbuild/lexers.mll"
                 tag
# 1079 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_curr_pos in
# 126 "ocamlbuild/lexers.mll"
                      ( { (x) with plus_tags = tag :: x.plus_tags } )
# 1083 "ocamlbuild/lexers.ml"

  | 2 ->
# 127 "ocamlbuild/lexers.mll"
              ( error lexbuf "Invalid tag modifier only '+ or '-' are allowed as prefix for tag" )
# 1088 "ocamlbuild/lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_conf_value_rec x lexbuf __ocaml_lex_state

and conf_values x lexbuf =
    __ocaml_lex_conf_values_rec x lexbuf 112
and __ocaml_lex_conf_values_rec x lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 130 "ocamlbuild/lexers.mll"
                                          ( conf_values (conf_value x lexbuf) lexbuf )
# 1099 "ocamlbuild/lexers.ml"

  | 1 ->
# 131 "ocamlbuild/lexers.mll"
                    ( x )
# 1104 "ocamlbuild/lexers.ml"

  | 2 ->
# 132 "ocamlbuild/lexers.mll"
              ( error lexbuf "Only ',' separated tags are alllowed" )
# 1109 "ocamlbuild/lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_conf_values_rec x lexbuf __ocaml_lex_state

and path_scheme patt_allowed lexbuf =
  lexbuf.Lexing.lex_mem <- Array.create 2 (-1) ;   __ocaml_lex_path_scheme_rec patt_allowed lexbuf 124
and __ocaml_lex_path_scheme_rec patt_allowed lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 135 "ocamlbuild/lexers.mll"
                  prefix
# 1121 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 136 "ocamlbuild/lexers.mll"
      ( `Word prefix :: path_scheme patt_allowed lexbuf )
# 1125 "ocamlbuild/lexers.ml"

  | 1 ->
let
# 137 "ocamlbuild/lexers.mll"
                      var
# 1131 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 2) (lexbuf.Lexing.lex_curr_pos + -1) in
# 138 "ocamlbuild/lexers.mll"
      ( `Var (var, Bool.True) :: path_scheme patt_allowed lexbuf )
# 1135 "ocamlbuild/lexers.ml"

  | 2 ->
let
# 139 "ocamlbuild/lexers.mll"
                      var
# 1141 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 2) lexbuf.Lexing.lex_mem.(0)
and
# 139 "ocamlbuild/lexers.mll"
                                           patt
# 1146 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_mem.(0) + 1) (lexbuf.Lexing.lex_curr_pos + -1) in
# 140 "ocamlbuild/lexers.mll"
      ( if patt_allowed then
          let patt = My_std.String.implode (unescape (Lexing.from_string patt)) in
          `Var (var, Glob.parse patt) :: path_scheme patt_allowed lexbuf
        else
          error lexbuf "Patterns are not allowed in this pathname (%%(%s:%s) only in ~prod)" var patt )
# 1154 "ocamlbuild/lexers.ml"

  | 3 ->
# 146 "ocamlbuild/lexers.mll"
      ( `Var ("", Bool.True) :: path_scheme patt_allowed lexbuf )
# 1159 "ocamlbuild/lexers.ml"

  | 4 ->
# 148 "ocamlbuild/lexers.mll"
      ( [] )
# 1164 "ocamlbuild/lexers.ml"

  | 5 ->
# 149 "ocamlbuild/lexers.mll"
      ( error lexbuf "Bad pathanme scheme" )
# 1169 "ocamlbuild/lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_path_scheme_rec patt_allowed lexbuf __ocaml_lex_state

and unescape lexbuf =
    __ocaml_lex_unescape_rec lexbuf 133
and __ocaml_lex_unescape_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 152 "ocamlbuild/lexers.mll"
                       c
# 1181 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 1) in
# 152 "ocamlbuild/lexers.mll"
                                 ( c :: unescape lexbuf )
# 1185 "ocamlbuild/lexers.ml"

  | 1 ->
let
# 153 "ocamlbuild/lexers.mll"
         c
# 1191 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 153 "ocamlbuild/lexers.mll"
                                 ( c :: unescape lexbuf )
# 1195 "ocamlbuild/lexers.ml"

  | 2 ->
# 154 "ocamlbuild/lexers.mll"
                                 ( [] )
# 1200 "ocamlbuild/lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_unescape_rec lexbuf __ocaml_lex_state

and ocamlfind_query lexbuf =
  lexbuf.Lexing.lex_mem <- Array.create 24 (-1) ;   __ocaml_lex_ocamlfind_query_rec lexbuf 138
and __ocaml_lex_ocamlfind_query_rec lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 158 "ocamlbuild/lexers.mll"
                                       n
# 1212 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_mem.(1)
and
# 159 "ocamlbuild/lexers.mll"
                                           d
# 1217 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(2) lexbuf.Lexing.lex_mem.(3)
and
# 160 "ocamlbuild/lexers.mll"
                                       v
# 1222 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(4) lexbuf.Lexing.lex_mem.(5)
and
# 161 "ocamlbuild/lexers.mll"
                                          a
# 1227 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(6) lexbuf.Lexing.lex_mem.(7)
and
# 162 "ocamlbuild/lexers.mll"
                                        lo
# 1232 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(8) lexbuf.Lexing.lex_mem.(9)
and
# 163 "ocamlbuild/lexers.mll"
                                        l
# 1237 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(10) lexbuf.Lexing.lex_mem.(11) in
# 164 "ocamlbuild/lexers.mll"
    ( n, d, v, a, lo, l )
# 1241 "ocamlbuild/lexers.ml"

  | 1 ->
# 165 "ocamlbuild/lexers.mll"
      ( error lexbuf "Bad ocamlfind query" )
# 1246 "ocamlbuild/lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_ocamlfind_query_rec lexbuf __ocaml_lex_state

and trim_blanks lexbuf =
  lexbuf.Lexing.lex_mem <- Array.create 6 (-1) ; (* L=2 [3] <- p ; [2] <- p ;  *)
  lexbuf.Lexing.lex_mem.(3) <- lexbuf.Lexing.lex_curr_pos ;
  lexbuf.Lexing.lex_mem.(2) <- lexbuf.Lexing.lex_curr_pos ;
  __ocaml_lex_trim_blanks_rec lexbuf 220
and __ocaml_lex_trim_blanks_rec lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 168 "ocamlbuild/lexers.mll"
                          word
# 1261 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_mem.(1) in
# 168 "ocamlbuild/lexers.mll"
                                       ( word )
# 1265 "ocamlbuild/lexers.ml"

  | 1 ->
# 169 "ocamlbuild/lexers.mll"
      ( error lexbuf "Bad input for trim_blanks" )
# 1270 "ocamlbuild/lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_trim_blanks_rec lexbuf __ocaml_lex_state

and tag_gen lexbuf =
  lexbuf.Lexing.lex_mem <- Array.create 6 (-1) ;   __ocaml_lex_tag_gen_rec lexbuf 226
and __ocaml_lex_tag_gen_rec lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 172 "ocamlbuild/lexers.mll"
                name
# 1282 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_mem.(0)
and
# 172 "ocamlbuild/lexers.mll"
                                       param
# 1287 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme_opt lexbuf lexbuf.Lexing.lex_mem.(2) lexbuf.Lexing.lex_mem.(1) in
# 172 "ocamlbuild/lexers.mll"
                                                    ( name, param )
# 1291 "ocamlbuild/lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_tag_gen_rec lexbuf __ocaml_lex_state

;;

