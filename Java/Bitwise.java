import java.math.*;
import java.io.*;
import java.util.*;
import java.lang.*;
import java.util.Scanner.*;
import java.lang.String.*;

public class Bitwise
{
	
	public static void main(String[] args)
	throws FileNotFoundException, IOException
	{
		int CIPHERS = 10;
		File hexFile = new File ("hex.txt");
		Scanner scan = new Scanner(hexFile);
		String[] hex = new String[11];
		int count = 0;


		do {
			hex[count] = scan.next();
			count++;
		} while (scan.hasNext());


		String[] bin = new String [CIPHERS];
		String[] xor = new String [CIPHERS];

		for (int i = 0; i < CIPHERS; i++)
			bin[i] = hexToBin(hex[i]);


		for (int i = 0; i < CIPHERS; i++)
			if (i % 2 == 0) {
				xor[i] = xOR(bin[i], bin[i+1]);
				xor[i+1] = xor[i];
			}

		FileWriter writer = new FileWriter("binary.txt");
		String[] keyArray = new String[10];
		for (int i = 0; i < 10; i++) {
			//writer.write((xOR(xor[0], bin[i])) + "\n\n");
		}


		String dec1 = "49 92 78 234 168 181 248 170 249 23 65 69 191 67 225 120 75 143 160 13 199 29 136 90 128 78 94 233 250 64 177 99 73 193 70 251 119 140 223 45 58 255 2 29 255 245 180 3 181 16 208 208 69 84 104 174 185 134 34 177 55 218 232 87 85 60 205 136 131 167 188 55 82 14 6 229 21 210 44 149 78 186 80 37 184 204 87 238 89 65 140 231 220 107 196 21 86 189 179 107 188 163 232 119 67 1 251 202 163 184 59 34 8 9 86 9 135 129 95 101 40 103 100 112 61 224 243 213 36 64 10 25 177 89 97 11 17 239 62";
		String dec2 = "35 76 2 236 187 251 175 163 237 24 81 10 189 17 250 114 79 205 162 1 138 26 131 66 207 6 75 189 229 72 177 43 7 223 68 186 113 145 217 96 110 244 8 31 253 229 173 70 165 6 157 159 127 84 59 237 185 200 97 191 41 199 226 5 19 46 218 147 130 176 188 44 92 75 69 249 25 207 58 159 28 183 65 81 246 213 81 244 72 12 130 178 203 36 204 91 2 138 167 110 183 180 171 36 23 26 179 205 173 184 53 111";
								Q
		String dec3 = "50 81 11 169 167 178 187 169 184 0 93 67 163 4 181 113 76 192 187 12 138 52 136 77 217 19 4 184 173 64 182 43 7 223 68 186 110 157 138 35 104 229 29 4 224 231 178 7 183 11 155 130 97 17 43 172 182 200 102 162 50 223 226 87 82 125 194 147 152 245 243 37 26 13 71 229 3 198 110 147 93 232 18 48 181 155 122 251 95 65 175 168 214 97 203";
		String dec4 = "50 81 11 169 170 178 168 164 253 6 65 79 181 23 181 96 92 192 170 13 201 26 137 8 194 6 75 168 173 94 160 106 2 144 86 244 122 138 211 48 110 245 2 30 175 225 172 1 168 17 151 132 122 92 104 161 183 135 105 163 123 200 244 87 84 50 193 152 204 180 239 99 89 2 86 227 5 205 58 149 68 238 65 96 234 212 90 239 82 4 137 231 218 125 131 84 2 188 166 112 189 168 235 119 82 0 184 218 187 186 36 107 19 15 4 13 142 198 68 126 44 118 127 61 48 237 129 234 46 76 20 4 225 49 90 16 16 231 34 155 230 99 106 170";
		String dec5 = "63 86 27 169 173 180 182 235 236 84 66 75 163 23 181 100 65 143 172 13 211 95 140 8 211 26 31 233 226 79 229 104 8 194 19 241 124 129 217 96 124 238 2 29 175 225 224 1 178 26 222 135 122 94 104 190 168 141 97 185 58 197 238 13 86 46 142 149 130 245 239 55 95 10 74 226 14 216 110 147 93 232 18 48 181 155 115 251 67 2 205 149 215 112 198 91 64 170 160 101 242 165 227 58 90 11 181 220 171 164 55 34 19 15 4 47 142 200 91 124 32 112"
		String dec6 = "50 81 11 251 172 251 185 190 253 84 65 93 162 67 225 105 94 202 189 88 197 25 205 75 210 6 27 189 226 78 183 106 25 216 74 186 52 216 222 40 123 232 77 7 231 233 163 14 231 20 151 156 126 17 35 168 189 152 34 163 62 202 245 18 71 46 142 143 141 179 249 99 92 25 73 230 64 198 33 133 78 186 13 121 236 207 82 255 17 18 132 180 204 97 209 25 2 174 188 102 242 178 228 54 67 78 172 192 171 169 56 34 11 8 72 0 194 202 78 105 53 34 100 53 115 178 196 206 53 5 11 12 247 116 32 31 15 229 42 201 242 109 113 182 207 97 167 17 204 34 159 119 172 231 170 136 162 241 153 131 18 43 17 190 135 165 156 53 93 37 248 228";
		String dec7 = "50 81 11 251 172 251 185 190 253 84 65 93 162 67 225 105 94 202 189 88 197 25 205 75 217 15 31 166 234 91 164 123 1 201 9 186 118 150 207 96 110 244 12 4 175 225 172 10 168 20 141 208 102 89 45 237 159 135 116 181 41 199 234 18 93 41 142 136 131 245 233 48 95 75 68 249 21 203 43 208 90 245 19 115 253 155 74 245 17 3 159 162 217 111 131 65 74 170 242 97 189 162 233 123 23 15 181 204 226 165 62 103 92 21 76 13 150 129 89 105 52 119 126 34 117 179 129 206 46 64 88 42 254 103 101 11 19 231 34 135 255 34 112 171 207 115 187 2 137 50 131 111 189 236 254 206 224 163 184 148 71 60 27 190 182 180 145 58 83 108 228 249 177 63 30 255 247 30 163 19 200 102 29 217 164 206";
		String dec8 = "49 92 78 234 168 181 248 191 253 17 21 94 165 6 181 96 65 198 160 12 138 8 133 77 210 26 75 189 229 76 229 104 1 217 67 186 112 139 138 53 116 244 12 0 255 249 224 15 161 67 159 208 101 67 39 163 191 200 96 185 47 137 238 4 19 46 203 146 152 245 253 45 94 75 69 228 14 204 59 157 89 233 65 125 247 201 91 186 65 14 154 162 202 36 197 71 77 162 242 118 186 163 172 50 89 24 178 218 173 164 61 103 18 21 4 65 194 224 79 101 101 81 127 49 125 169 211"
		String dec9 = "39 25 70 249 187 178 174 173 236 17 24 65 168 26 188 48 14 202 160 27 216 6 157 92 201 16 5 233 254 74 173 110 4 213 19 233 109 153 222 37 105 188 94 80 238 236 167 9 181 10 138 152 127 66 100 237 182 137 111 181 55 208 167 22 19 45 220 147 143 176 248 54 72 14 6 237 15 205 110 151 89 244 4 98 249 207 87 244 86 65 134 162 193 119 143 21 67 239 162 112 189 165 233 51 66 28 190 136 164 165 34 34 25 15 71 30 155 209 95 101 43 101 59 112 113 174 197 154 39 5 8 31 254 114 101 29 8 248 34 201 237 109 118 228 139 99 171 21 208 32 133 115 167 238 240 39";
		String dec10 = "70 109 6 236 233 152 183 162 251 29 70 79 237 44 237 118 65 221 170 60 195 28 153 65 207 17 10 187 244 9 237 57 89 128 5 179 57 156 207 175 182 29 3 21 252 160 163 20 190 19 138 159 50 80 59 237 172 128 103 240 58 219 243 87 92 59 142 220 155 167 245 55 83 5 65 171 15 159 60 208 79 245 13 102 241 213 89 186 82 14 137 162 203 42 131";
		String target = "50 81 11 169 186 190 187 190 253 0 21 71 168 16 230 113 73 202 238 17 217 69 205 127 200 26 5 233 248 90 172 101 14 144 82 186 106 140 216 37 123 241 77 19 230 240 168 3 181 79 222 158 119 71 45 191 248 157 113 181 123 221 239 18 19 54 203 133 204 184 243 49 95 75 82 227 1 209 110 159 82 249 4";
		System.out.println(spaces(dec1, 2));
		//System.out.println(xOR(s,s1));

		
		for (int i = 0; i < CIPHERS; i+=2) {
			writer.write("Binary Encrypted Text #" + (i+1) + ":\n" + bin[i]+"\n\n");
			writer.write("Binary Encrypted Text #" + (i+2) + ":\n" + bin[i+1]+"\n\n");
			writer.write("__________________________________________________________" +
				"_______________________________\n" + xor[i] + "\n" + 
				"\n\n\n\n\n");
		}
		writer.close();
		System.out.println(hex[1]);
	//	hex = spaces(hex, 2);
		System.out.println();
		System.out.println(hex[1]);
	}

	static String hexToBin(String s) {
  		return new BigInteger(s, 16).toString(2);
	}

	static StringBuffer[] spaces(String strArray, int buffer) {
		for (int word = 0; word < strArray.length; word++) {
			char c = ',';
			StringBuffer strBuffer =  new StringBuffer(strArray);
			int length = strArray.length();
			for (int j = 0; j < length / buffer; j++)
				strBuffer.strArray = strBuffer.insert(buffer,c);
		}
		return strArray;
	}
	static String xOR(String binary1, String binary2)
	{
		String output = "";
		int length = 0;
		if (binary1.length() <= binary2.length())
			length = binary1.length();
		else length = binary2.length();

		for (int i = 0; i < length; i++) {
			int bit = binary1.charAt(i) ^ binary2.charAt(i);
			output += bit;
		}
		return output;
	}
	static String hexOR(String hex1, String hex2)
	{
		String binary1 = (hexToBin(hex1));
		String binary2 = (hexToBin(hex2));
		
		return xOR(binary1, binary2);
	}

}
